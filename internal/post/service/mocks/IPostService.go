// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/SadikSunbul/Go-Clean-Architecture/internal/post/dto"
	entity "github.com/SadikSunbul/Go-Clean-Architecture/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// IPostService is an autogenerated mock type for the IPostService type
type IPostService struct {
	mock.Mock
}

// Create provides a mock function with given fields: post
func (_m *IPostService) Create(post *dto.PostDto) (*entity.Post, error) {
	ret := _m.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.PostDto) (*entity.Post, error)); ok {
		return rf(post)
	}
	if rf, ok := ret.Get(0).(func(*dto.PostDto) *entity.Post); ok {
		r0 = rf(post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.PostDto) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *IPostService) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *IPostService) GetAll() (*[]entity.Post, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *[]entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entity.Post, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entity.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Post)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *IPostService) GetById(id string) (entity.Post, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Post, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Post); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Post)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, post
func (_m *IPostService) Update(id string, post *dto.PostUpdateDto) (int64, error) {
	ret := _m.Called(id, post)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *dto.PostUpdateDto) (int64, error)); ok {
		return rf(id, post)
	}
	if rf, ok := ret.Get(0).(func(string, *dto.PostUpdateDto) int64); ok {
		r0 = rf(id, post)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, *dto.PostUpdateDto) error); ok {
		r1 = rf(id, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIPostService creates a new instance of IPostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPostService {
	mock := &IPostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
