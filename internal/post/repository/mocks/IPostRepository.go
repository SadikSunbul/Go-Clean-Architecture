// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/SadikSunbul/Go-Clean-Architecture/model/entity"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// IPostRepository is an autogenerated mock type for the IPostRepository type
type IPostRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *IPostRepository) Create(_a0 entity.Post) (entity.Post, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Post) (entity.Post, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.Post) entity.Post); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Post)
	}

	if rf, ok := ret.Get(1).(func(entity.Post) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *IPostRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *IPostRepository) GetAll() ([]entity.Post, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Post, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Post)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByField provides a mock function with given fields: filter
func (_m *IPostRepository) GetByField(filter primitive.M) (entity.Post, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetByField")
	}

	var r0 entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.M) (entity.Post, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(primitive.M) entity.Post); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(entity.Post)
	}

	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *IPostRepository) GetById(id string) (entity.Post, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Post, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Post); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Post)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, _a1
func (_m *IPostRepository) Update(id string, _a1 primitive.M) (entity.Post, error) {
	ret := _m.Called(id, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string, primitive.M) (entity.Post, error)); ok {
		return rf(id, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, primitive.M) entity.Post); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Get(0).(entity.Post)
	}

	if rf, ok := ret.Get(1).(func(string, primitive.M) error); ok {
		r1 = rf(id, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIPostRepository creates a new instance of IPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPostRepository {
	mock := &IPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
